service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs14.x
  apiGateway:
    apiKeys:
      - crud-serverless-users-apikey
  iam:
    role:
      statements:
        - Effect: Allow
          Action: dynamodb:*
          Resource: arn:aws:dynamodb:us-east-1:488633441181:table/usersTable
        - Effect: Allow
          Action: s3:*
          Resource: arn:aws:s3:::bucket-serverless-course-omar-hernandez-bastos-123213/*
  environment:
    BUCKET: bucket-serverless-course-omar-hernandez-bastos-123213
    SECRET_EGG: ${ssm:/SECRET_EGG}

functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - "authorizer/handler.js"
  get-users:
    handler: getusers/handler.getUsers
    package:
      patterns:
        - "getusers/handler.js"
    events:
      - http:
          private: true
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    events:
      - http:
          path: users
          method: POST
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.8
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          path: signedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - { Ref: BaseLambdaLayer }
    #        - arn:aws:lambda:us-east-1:488633441181:layer:layer-for-serverless-platzi
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: bucket-serverless-course-omar-hernandez-bastos-123213
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: upload/

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: bucket-serverless-course-omar-hernandez-bastos-123213
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref S3Bucket
                    - /*
              Principal: "*"

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  apiGatewayServiceProxies:
    - sqs:
        path: /likeuser
        method: post
        queueName: likequeue
        cors: true
        response:
          template:
            success: |-
              { "message": "accepted" }
            clientError: |-
              { "message": "there is an error in your request" }
            serverError: |-
              { "message": "there was an error handling your request" }
  constructs:
    sqs-queue:
      type: queue
      batchSize: 1
      worker:
        handler: likeuser/handler.likeuser
        package:
          patterns:
            - "likeuser/handler.js"
      extensions:
        queue:
          Properties:
            QueueName: likequeue

plugins:
  - serverless-apigateway-service-proxy
  - serverless-lift
  # - serverless-domain-manager

package:
  individually: true
  patterns:
    - "!*/**"
    - "!nodejs*"
    - "!*.zip"

layers:
  base:
    name: "prd-dependencies"
    compatibleRuntimes:
      - nodejs14.x
    package:
      artifact: app/nodejs.zip
